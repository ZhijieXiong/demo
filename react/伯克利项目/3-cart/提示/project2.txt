＃ 介绍

欢迎来到购物车项目的第2部分。现在，您已经建立了一个漂亮的产品页面，是时候介绍状态来帮助我们的用户与其互动了！

第2部分：将状态带入视图

# 🏆 目标2：创建购物车

特征：

1.使用状态来跟踪已向购物车中添加的每种产品的数量。
2.显示每个产品的总数和钱数，作为收据。
3.显示购物车中所有产品的总费用。

完成后的产品效果如下：

lab6-4.gif

完成的产品

## 2.0 — 状态评论+反应中的思考

对于项目的这一部分，重要的是要掌握准确的状态处理方法。我们强烈建议您完成前面的任务清单实验，并理解其中的状态的作用。

另一个很难理解但值得理解的概念是如何“用React思考（Think in React）”，这需要我们掌握以某种方式构造组件，以及哪些组件管理应用程序的哪些状态。

我们建议您在React的官方文档中阅读这篇文章。https://reactjs.org/docs/thinking-in-react.html

请同样使用“ Answers.md”回答下面的问题，并提交。

- 问题

    举例说明为什么需要状态？

## 2.1 — 了解组件数据流

### 创建Receipt收据组件

首先，在页面中添加一个“receipt”组件，它的代码在`src/`中的`Receipt.jsx`中

拥有“收据”组件后，将其导入到“购物车”中。然后，在所有产品组件之后将`<Receipt />`添加到render函数。

lab6-5.png

在继续之前，让我们花一点时间来了解`Receipt`组件的工作原理。

    render() {
      // (1) ----------------------
      const items = [{ name: "Apple", price: 3 }, { name: "Banana", price: 3 }];
      return (
        <div className="receipt">
          <h2 className="receipt-text">Receipt</h2>
    	  // (2) ----------------------
          {items.map(this.renderItem)}
    	  // (3) ----------------------
          <div className="receipt-item">
            <div className="total">Total:</div>
            <div className="total">$0</div>
          </div>
        </div>
      );
    }

这是我们的`render`函数。现在，它：

1.声明一个常数数组
2.调用`this.renderItem`将每个元素变成一行
3.显示总成本。现在，它硬编码为“$0”，我们会改掉它

接下来，让我们看一下`this.renderItem`：

    renderItem(item) {
      return (<p>Replace Me!</p>);
    }

此函数负责呈现单个项目。它还没有做很多！

### 了解我们的组件数据流

在继续之前，让我们考虑一下数据将如何流过项目的各个组件。在我们应用的顶层，我们有一个“Cart（购物车）”组件。我们的购物车有两种类型的子组件：它具有我们的`Product`组件和`Receipt`组件的多个实例。

“Cart”将通过props将数据发送给其子组件。对于“Product（产品）”，我们的props是产品的名称和价格。对于我们的“Receipt（收据）”，我们的props将是购物车中的物品。这就是所谓的父组件到子组件通信！如下图：

lab6-6.png

在项目的这一部分中，我们还希望实现子组件到父组件的通信。

当某人单击“产品”（子组件）中的“添加到购物车”时，我们要更新“购物车”（父组件）。我们将使用名为`addToCart`的函数来完成此操作，该函数将通过props传递到每个`Product`中。

当产品调用此函数时，我们的“购物车”组件将更新其状态的一部分，以跟踪购物车中的物品。来自购物车状态的这些值将通过props传递给我们的“Receipt”组件。

- 为什么/如何更新prop？

    如果`Cart`的render函数看起来像：

    render() {
    	return (
    		<Product
    			itemName={this.state.items[0].name}
    			price={this.state.items[0].price}
    		/>
    	);
    }

这意味着每次我们更新“ this.state.items [0]”（我们将在下一节中讨论）时，“ <Product />”将使用来自“购物车”中的新状态重新进行渲染。

请弄清楚上面的内容。需要的话，请问老师或助教同学。当您开始构建自己的React项目时，了解该项目的整体情况将非常有用！

- 问题2.1

我们如何在React中完成父组件到子组件的通信？子组件到父组件呢？他们为什么不能一样？

-   注意：“那么，为什么我们仍然需要状态？”

当我们将其中一种产品添加到购物车时，购物车的属性会发生变化–它具有不同的项目和不同的总成本。为了跟踪这些动态属性并将其相应地呈现在收据上，我们需要利用状态。

为什么产品卡不需要状态？

产品组件只是一个功能。您传入一些东西（例如名称，价格等），它弹出一个呈现在屏幕上的JSX元素。这个元素不会改变，因为它总是根据给定的props做同样的事情。

## 2.2 初始化状态

在开始下一节之前，我们先更改一些代码（在第二部分中将其替换）：

1.删​​除`addToCart`函数和您在`Product.js`中的计数器变量
2.在“ Cart.js”中删除“ limit” prop
3.将Product.js中的onClick属性的值更改为：（）=> {}（一个空函数）

此时，所有内容看起来都相同（没有错误），当您单击“添加到购物车”时，什么也不会发生。

现在我们已经建立了React应用程序的结构，让我们考虑一下在Cart组件的状态中需要跟踪哪种变量。一旦决定了它们，就需要在“构造函数”中初始化状态。

请考虑“购物车”需要跟踪什么以及如何表示它。我们建议您在继续之前尝试写出如何构造状态并考虑利弊。

下面是我们建议的状态

“购物车”组件唯一需要跟踪的是购物车中的商品（items）。为了表示这一点，我们将有一个名为`cartItems`的数组，其中包含购物车中每种产品的对象。

例如，如果我们的购物车有2个苹果和1个橙子，那么我们的状态可能如下所示：

    {
    	cartItems: [
    		{
    			productName: "Apple",
    			price: 1,
    			count: 2
    		},
    		{
    			productName: "Orange",
    			price: 1,
    			count: 1
    		}
    }

现在，在`Cart.js`中编写一个初始化状态的构造函数（该状态看起来像购物车中没有任何物品）。

在继续项目之前先完成此问题！

- 问题2.2

    给定我们的代码结构，我们应该如何去添加和删除购物车中的物品？

## 2.3 — 加入购物车

### 创建回调函数

在“ Cart.js”中的购物车组件内，创建一个名为“ handleAddToCart”的函数。

每当将新商品添加到购物车时，此函数都会更新购物车的状态。请注意，在上面的示例状态中，我们需要两个信息，以将商品添加到购物车中：`productName`和`price`-将它们作为参数传递给函数。

完成`handleAddToCart`，以便如果产品已经在`this.state.cartItems`中，则其数量会增加。如果不是，则以2.2部分中所示的格式将其添加到`this.state.cartItems`中。

- 提示

1. 请回顾如何使用“ this.setState”。请记住，它接受一个对象作为参数！

2. 要处理购物车更改，您需要处理两种情况：添加一个新的商品到”cartItems”数组中，或“更新”已经存在的产品的数量。

    下面是一种可能的方法：

    - 首先，通过spread（“ ...”）运算符，将当前的状态，散布到新数组中

    - 遍历此新数组以找到与我们要添加的产品相对应的对象。
        -如果尚不存在，则为产品的“附加”。请回忆我们是如何将项目“添加”到状态数组中的。答案不是“.push”。还记得为什么吗？
        -如果存在，我们需要更新找到的产品对象。确定您需要更新的内容并直接对其进行修改。

            请记住，因为我们事先使用了spread，所以我们有效地复制了状态数组-这与`this.state.cartItems = ...`不同。

    -使用“ this.setState”将“ cartItems”设置为复制的数组。

    注意：以上所有内容都可以使用.reduce简化为单个函数调用，但是这样做可能复杂。请查看数组`reduce`操作的文档：

    [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce)

### 传递回调

为每个`<Product />`添加一个名为`onAddToCart`的prop，该prop传递父`Cart`组件中定义的`handleAddToCart`函数。

现在，在`Product.js`中，使用此prop，将空的`onClick`函数替换为我们刚刚通过prop传递的函数！ 请记住，`handleAddToCart`必须包含`productName`和`price`。

如果您无法确定onClick中应包含的内容，请返回事件监听器查看。

- 提示

    如果需要有关如何添加单击功能以及为什么需要包装器功能的复习，请看第1.3部分或“事件监听器”部分。

这应该是我们要使状态正常工作所需要的！虽然网站视觉上还没有任何变化，但是请随时用[React DevTools]（https://alligator.io/react/react-devtools-intro/），观察您的Cart组件的状态是否符合您的期望。

## 2.4 — 显示收据

项目的最后一部分是我们的“收据”组件。让它栩栩如生！

### 传入`cartItems`

在`Cart.js`中，将`cartItems`变量传递给`<Receipt />`。称为“ items”。现在，我们应该可以使用this.props.items在“收据”组件中访问它。

### 渲染项目

是时候填写`renderItem`函数了。该函数接受一个参数：“ item”，它代表我们“ cartItems”列表中的一个对象。

填写`renderItem`，使其返回结构如下的JSX。将下面硬编码的值替换为来自“ item”对象的数据。

    <div className="receipt-item" key={item.name}>
    	<div className="receipt-text">
    		Replace Me x 1
    	</div>
      <div className="receipt-text">
    		$0
    	</div>
    </div>

- 注意：“为什么我们要使用`key = {item.name}`作为我们`div`的prop？”

    React的核心功能之一是它能够智能地重新渲染DOM，仅更新实际已更改的部分。当我们渲染项目列表时，React期望我们将一个`key` prop传递给顶层元素。这个“key”帮助它唯一地标识每个项目，以提高效率！

在本例中，我们可以将每个项目的名称用作键。在此处了解更多信息：

[Lists and Keys - React](https://reactjs.org/docs/lists-and-keys.html#keys)

### 渲染所有项目

最后，将const项目= ...替换为我们先前传入的items prop！现在，您的收据应显示所有物品及其数量！

lab6-7.png

项目出现了！我们现在所缺少的就是总数

## 2.5 算总数

### 计算总价

我们需要做的最后一件事是计算购物车中所有物品的总价。

1.在“Receipt收据”组件中创建一个函数，该函数循环遍历“ this.props.items”并返回购物车中所有物品的总费用。
2.在您的`render`函数中，用对此函数的调用替换硬编码的总价。

### 修复价格格式

您可能会注意到我们的十进制值价格格式不正确。它现在是“ 7.5美元”，我们希望它是“ 7.50美元”

解决这个问题！可参考 https://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-dollars-currency-string-in-javascript

好嘞！您现在应该有一个工作的购物车！

＃🏆目标＃3：从购物车中移除

现在，您已经在目标2中为我们的购物车构建了完整的功能，让我们采用该模式并将其应用于相关功能：从购物车中删除商品。

首先，在“ <Product />”组件中添加一个按钮，使用户可以从购物车中删除该商品。

当用户单击“从购物车中删除”按钮时，应将其从购物车中完全删除。

- 提示

查看数组的.filter函数：
[Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Filter)

### 额外的功能

如果您准备好迎接挑战，请更新“从购物车中删除”功能，以仅从购物车中删除该商品的一个实例，并在商品计数为0时完全删除该商品。

＃您已经到了该项目的结尾！ 🎉

这很长很艰难，但是您成功了！希望这意味着您现在对功能组件和状态的基础有了更深入的了解。去庆祝吧！我们为您感到骄傲 😊

请提交Github代码仓库的URL