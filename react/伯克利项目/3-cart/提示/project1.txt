＃ 介绍

到目前为止，我们一直在学习和研究小型代码段，分别探索前端概念。这个项目将为您提供一个机会，将您学到的所有知识融合在一起，并从头开始构建一些东西！

在此作业中，我们将构建一个“在线购物车”。这将是您迄今为止最大的任务，您将负责仔细考虑组件设计，以及从头开始编写组件。话虽如此，我们将在整个过程中提供大量指导和提示！

## 步骤

该项目将分为两部分，我们建议您尽快开始！

第1部分：设计组件和构建视图

第2部分：将状态带入视图

我们也鼓励您在课堂上找其他人一起工作，以帮助您思考该项目的方法！话虽如此，您应该自己编写代码，这样您才能充分练习。

## 设置您的开发环境

### 安装依赖项

    npm install

这个简单的命令将检查您的package.json文件，并下载项目所依赖的所有库，并将它们安装到名为node_modules的文件夹中。如果查看“ package.json”内部，您会发现其中之一是“React”！

### 本地开发

    npm start

此命令将启动一个特殊程序，该程序在每次更改代码时都会更新浏览器。这意味着您可以并排打开文本编辑器和浏览器，当文本编辑器内的文件保存后，浏览器里的网页会自动刷新，实时显示最新的内容，。按Ctrl-C可以退出服务器。

＃ 开始

获取初始代码，进入文件夹，运行`npm start`，在浏览器中打开 http：//localhost：3000

在您喜欢的文本编辑器中打开您的项目文件夹，我们的项目中有两个重要的文件夹：src /和public /。按照惯例，“ public /”是HTML文件和其他资源的存放地，而“ src /”则是我们的JavaScript存放地。

请对“ index.html”进行一些更改。保存后，您应该在浏览器中自动看到这些更新的内容。因为React能让浏览器自动对HTML和JS文件中的更改做出反应-您现在就可以开始开发了！

重要提示：在大多数问题的末尾，我们将包括一些小测验问题。我们建议您在项目根目录中提供的Answers.md文件中记下每个问题的答案。最后提交。

# 🏆 第1部分：商品清单

要求

1.在组件中显示产品的名称和价格
2.当用户单击“添加到购物车”时，将弹出一个警报，通知用户该商品已经添加了多少个。
3.当添加到购物车中的商品数量超过每种产品所独有的最大商品数量（限制）时，相应地通知用户，并停止增加购物车中商品的数量。
4.显示多个产品的列表。

## 🎁 推车和产品

当您在线购物时，购物体验的关键部分是页面上产品的表示方式。首先，我们用一个组件显示产品的名称和价格，并允许用户将该商品添加到我们稍后将要创建的结帐区域/收据中。

在线商店通常可以包含包含数百种产品的页面，每种产品以相似的方式表示。您可以选择几种方法实现这种网页。比如：您可以使用HTML和CSS产生一种产品的视图，然后复制并粘贴该视图很多次，直到获得所需的所有产品视图为止。

您也可以构建一个可重用的组件，将产品信息作为props，这是我们在本节中将要做的。你会体会到这种方法的好处的。

## 1.1 将购物车放在屏幕上

现在，如果您运行`npm start`，您会发现我们的页面上没有太多内容。即使`Cart.js`具有一个标题（heading）元素，我们仍未在屏幕上看到它。这是因为我们缺少对`ReactDOM.render`的调用，该调用告诉React在页面的特定部分初始化组件。

请访问`index.js`，然后在文件底部，将<Cart />组件渲染到HTML文件中的空div中。完成此操作后，您的屏幕应该看起来像下面这样！

lab6-1.png

- 问题1.1

    用你自己的话解释`ReactDOM.render`在做什么。

## 1.2 创建产品卡

现在，我们已经在屏幕上显示了购物车组件，我们将为在线商店中的每种产品创建卡片。您将从头开始创建产品组件！

我们首先要考虑的是应该从父组件（“ Cart.js”）传递哪些props，因为这告诉我们可以从Product组件内部访问到哪些信息。

使用下面的产品图片，想一想我们将把哪些props传递到购物车中的产品（Product）组件中。

lab6-2.png

产品组件将是什么样子

- 回答（继续之前阅读）

    如果您想到一个名称props和一个价格props，非常好。但是，我们还需要一个商店中“有货”的产品数量的限制。

    因此，我们需要产品组件的三个props (`<Product />`):

    - `productName` (String)：产品名
    - `price` (Number)：价格
    - `limit` (Number)：限制

    您可以在`Cart.js`中将这三个props的值设置为任意值。

现在我们知道我们将在产品中使用哪些props，让我们构建组件。您将需要在src /中创建一个名为Product.js的新文件，并将新组件导入到Cart.js中。

为创建一个干净的界面，我们为您导入了一个名为Semantic UI的库。您的工作是使用语义UI提供的CSS类来匹配上面的模型。在下面查看有关如何在语义中创建卡的文档：

[Card | Semantic UI](https://semantic-ui.com/views/card.html#buttons)

- 说明：“组件的CSS在哪里？”

    [语义UI]（https://semantic-ui.com/）会为我们处理样式，只要我们使用文档提供的特定类名即可。

完成后，验证您的组件是否出现在页面上并看起来像这样。“ Apple”和“ 2”应对应于您在`Cart.js`中为props分配的值

- 问题1.2

    使用语义UI有哪些优点和缺点？ （或与此相关的任何UI库）

## 1.3 添加到购物车

让我们解决下一个功能：“添加到购物车”操作。

在您编写的产品组件中，编写一个名为addToCart的函数，该函数接受一个参数并显示警告（弹出窗口），提示“购物车中有N个苹果！” （其中“ Apple（苹果）”是您的产品的名称，N是用户单击该产品的“添加到购物车”的次数）。

- 提示

        //警报示例：
        alert("购物车中有3个苹果！");

    您还需要一个计数器变量来跟踪单击按钮的次数！

添加一个if语句，以检查用户单击按钮的次数是否大于props的最大限制。如果更大，则弹出窗口应仅显示“您的购物车中有太多苹果！”在这种情况下，该项目的数量不应增加。

添加一些更多的逻辑，以便当某件商品的限额等于0时显示“该商品缺货！”。

将`onClick`属性添加到'className =“ui bottom attached button”的div中，并将其设置为一个函数（注意不是一个函数的返回值！），该函数将调用您在上面编写的`addToCart`函数。

- 为什么我们需要用另一个函数包装`addToCart`？

    应该给onClick属性设置为一个函数（而不是函数调用），这样就可以在单击其所属元素时调用该函数。

    我们要设置的函数是addToCart，但是在将其分配给onClick属性时，不能直接设置它，因此我们先将addToCart封装在一个函数中，该函数的唯一目的是调用addToCart。

    请在此处阅读有关此方法的更多信息：[有关onClick的更多信息](https://stackoverflow.com/questions/3007336/how-do-you-assign-a-javascript-onclick-attribute-dynamically)

完成后，您应该可以单击“添加到购物车”按钮，然后看到此弹出窗口！

lab6-3.png

完成的产品

- 问题1.3

    用你自己的话解释为什么我们需要用另一个函数包装addToCart。

## 1.4 — 补货

差不多好了！没有一个在线商店仅提供一种产品，因此我们将再添加3种具有不同价格和限额的产品。

最简单的方法是将“产品”组件的新实例手动添加到“ Cart.js”中，但这太麻烦了。我们将为您提供商店的产品清单。

将以下行添加到“ Cart.js”的顶部，以导入一些我们在“ Data.js”中编写的数据

    import ProductData from "./Data"

查看“ Data.js”以了解“ ProductData”是什么，然后更新“ Cart.js”以呈现该列表中的产品。

将自己的产品添加到“ Data.js”中，以使该在线商店包括您自己的产品！

- 问题1.4

    1.4a）是什么使我们只能在购物车的“渲染”功能内编写一次Product组件？

    1.4b）为什么我们不只是在我们的`render`函数中执行此操作

        <Product title="Apple" price={1} />
        <Product title="Banana" price={2} />
        <Product title="Orange" price={3} />

    除了代码清洁之外，从对象中提取数据还有什么好处？

# 提交

恭喜，您已完成第1部分！🙂

请提交Github仓库的URL