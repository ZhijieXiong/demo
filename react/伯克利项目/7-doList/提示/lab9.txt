## Introduction

欢迎！今天，我们将继续进行Pomodoro计时器项目。我们将待办事项列表系统集成到我们的应用程序中。该实验的标题为Pomodoist，是流行的待办事项列表应用程序[Todoist]（https://todoist.com/）的游戏。

part2.gif

## Pomodoist如何工作？

您可以在“Add Task（添加任务）...”的输入框中将项目添加到待办事项列表中（`TodoInput.jsx`）。该应用程序将显示待办事项列表（“ TodoItem.jsx”），您可以通过单击“Clock（时钟）”按钮来启动新的Pomodoro计时器。每次您完成待办事项的一个会话时，该项目下的指示器都会增加（已完成的会话数）。

您还可以检查到目前为止已完成的任务，并单击清除按钮（`clearButton.jsx）清除它们。当然，仅当选中一项时，clearButton才会显示。

＃设定

下载 hwb10.zip，它在上个实验的最终产品上添加了一些内容。如果您没有完成上个实验，请不要担心，hwb10中已经包括了上个实验的答案。

在本实验中，您的大部分工作将在`App.jsx`，`TodoItem.jsx`和`TodoInput.jsx`中进行。 “ Timer.jsx”已经实现，您只需要使用该组件即可。

## 1.初始化TodoList的状态

您将在此处使用App.jsx

我们将从初始化App构造函数中的状态开始。我们已经添加了本实验中实现的所有方法的绑定代码，因此您无需担心绑定。

该状态具有4个键：“ items”，“ nextItemId”，“ sessionIsRunning”和“ itemIdRunning”。

-`items`：这是当前待办事项的列表。您将在addItem上将项目对象附加到此列表上。首先将此初始化为空数组。
-`nextItemId`：我们将使用此ID来唯一标识每个项目。初始化为“ 0”。
-`sessionIsRunning`：这是一个布尔值，用于确定是否应显示计时器。它应该默认为false，因为默认情况下我们不会显示Timer。
-`itemIdRunning`：这是计时器正在倒计时的当前项目ID的Number值。由于我们开头没有当前项目ID，因此可以默认为“ null”。

## 2. 新增项目

### 2.1。 TodoInput

看一下现有的`TodoInput`组件。它已经为您实现，但是值得了解它的工作方式，因为它与我们过去实现表单的方式稍有不同。

<form />元素

“ <form>”是内置的HTML元素，可帮助您将表单字段分组在一起，例如“ <input>”框和“ <button>”按钮。建议使用它们来接受页面上的用户输入，因为它们带有一些有用的属性。对于我们来说，最重要的是它们会对用户按下“ enter”键有反应！

我们没有向按钮组件传递onClick prop，而是向整个表单传递了onSubmit prop。当用户按下我们的按钮（如带有“ submit”类型的按钮）或“ enter”键时，将自动调用“ onSubmit”。

最后，使用<form>标签的最后一个重要部分是我们的onSubmit函数中的这一行：e.preventDefault（）。这是使用表单时解决许多错误的解决方案，因为它可以防止浏览器中“提交”事件的默认行为（碰巧正在发送我们不想发送的整页请求）。这使您可以完全控制提交表单时发生的情况。每当您使用具有自定义提交行为的表单时，请不要忘记添加它！

### 2.2. 实现addItem

让我们开始将事情添加到待办事项列表中。 `addItem`函数获得一个对项目的描述，创建一个新的项目对象，并将其附加到items数组。

这是一个item对象的示例：

    item = {
    	id: 123, // 标识此项目的唯一ID
    	description: "cs61a problem set", // 待办事项的简要说明
    	sessionsCompleted: 3, // pomodoro会话完成了多少次
    	isCompleted: false, // 项目是否完成
    }

您应该通过按以下方式初始化这些属性：

-`id`必须初始化为`nextItemId`
-`description`必须初始化为传递给`addItem`的description参数
-`sessionsCompleted`必须初始化为0
-`isCompleted`必须初始化为false

更新状态中的项目时，请不要忘记将`nextItemId`加1，这样我们可以将该数字用作我们创建的下一个项目的ID。另外，请确保将新数组传递给setState函数！

- 提示

    使用JavaScript数组方法concat添加项目列表。

    查看MDN以获取有关`concat`方法的更多信息：
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat

🏁 您可以在[React DevTools]（https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=zh-CN）上验证您的状态到目前为止是否正常运行！ （您应该已经安装了此工具，如果在DevTools中看不到React选项卡，请单击链接）

尝试在您的`TodoInput`输入，并按Enter。除了清除文本框之外，什么都不会发生。但是，在DevTools中的`<App>`组件中（在React选项卡下），您应该能够在State选项卡中看到新项：

lab9-1.png

注意，“ items”和“ nextItemId”都已更新。

## 3. 显示TodoItems

现在我们可以添加项目了，让我们将它们显示在屏幕上。记住要渲染多个组件，例如，您需要使用map函数：

    const numbers = [1, 2, 3, 4, 5];
    const listItems = numbers.map((number) =>
      <li>{number}</li>
    );

在这种情况下，您将在items数组上调用map，以显示`TodoItem`组件的列表。TodoItem组件已经为您实现。确保通读`TodoItem.jsx`并了解其作用。

### TodoItem的工作原理

TodoItem具有以下props：

-`description`代表要显示的项目描述的字符串
-`sessionsCompleted`一个整数，表明该项目已经完成了多少次会话
-`isCompleted`布尔值，表示该项目是否已标记为完成。请注意，该项目将其作为自身状态的一部分来管理，而是由App.jsx对其进行管理，因此，我们将其称为“ TodoItem”“受控组件”。
-`startSession`，点击时钟按钮时会调用此函数。现在将此留空，您将在本实验的第3部分中实现`startSession`。
-`toggleIsCompleted`，当单击项目的完成按钮时，将调用此函数。现在将此字段留空，您将在本练习的第5部分中实现“ toggleIsCompleted”。

最后，在map如下所示的项目列表时，请确保将项目的id添加为TodoItem的键：

    {items.map((...) => (
    	<TodoItem
    		...
    		key={...the id value...}
    	/>
    ))}

键可帮助React识别哪些项目已更改，添加或删除。应该为数组内的元素提供键，以赋予元素稳定的身份。

- 阅读：键如何工作？为什么要使用“ id”作为键？

    React的树“差异”算法使用键来“提示”哪些子元素在不同的渲染中可能是稳定的（即它们不会更改，因此不需要在DOM中进行更新），该算法允许组件更新快速而可预测。

    不建议将索引用作键，因为项目的顺序可能会更改，并且可能会对性能产生负面影响。有关此的更多信息：

    [索引作为键是一种反模式]（https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318）

    键如何帮助加快速度？

    React使用键作为启发式算法来实现O（n）差异树的算法，而不是O（n ^ 3），这是用于生成将一棵树转换为另一棵树的最小操作数的最新技术！）。

    如果您想了解更多有关React如何在幕后工作的信息，请阅读以下文章：
    [Reconciliation - React](https://reactjs.org/docs/reconciliation.html)

---

🏁 像以前一样尝试输入您的`TodoInput`-这次，您应该看到新的`TodoItem`出现了！

lab9-2.png

## 4. 实现startSession并重新添加Timer

### 4.1实现startSession

`startSession`更新状态的两个键，`sessionIsRunning`和`itemIdRunning`。当我们开始一个会话时，我们想将sessionIsRunning设置为true，将itemIdRunning设置为startSession的id参数。

实现`startSession`之后，转到TodoItem，将`startSession`的prop设置为：

    () => this.startSession(id)

其中，“ id”是该特定项目的ID（在这种情况下，它恰好与您作为“键”传递的值相同）。通过传递`（）=> this.startSession（id）`，我们保证`startSession` prop以该项目对应的`id`值调用`startSession`。

- 这里发生了什么？

    您可以将其视为创建了一系列如下所示的函数：
        function startSessionOne() {
        	let id = 1;
        	this.startSession(1);
        }

        function startSessionTwo() {
        	let id = 2;
        	this.startSession(2);
        }

    这就是在我们的`map`函数中发生的事情-我们正在为每个ID创建一堆这样的特定函数。这些函数在被调用时会使用其特定的ID调用“ startSession”。

🏁要验证您已正确实现`startSession`，请在React DevTools中再次检查您的<App>，并确保在单击其中一项中的🕒（clock0按钮）时状态正在更新。

“ itemIdRunning”和“ sessionIsRunning”应该使用您单击的项目进行更新。

lab9-2.png

注意：如果您在`itemIdRunning`中看到一个`Class {...}`对象，那么您没有将正确的东西传递给<TodoItem />`的startSession prop！仔细阅读最后一步。
---

### 4.2 重新添加计时器

现在该增加我们在上个实验中实现的计时器了。计时器的代码当前已被注释掉。在工作模式下添加Timer组件，并使其在渲染后自动开始。现在将“ onSessionComplete”保留为空白或使用占​​位符。在本实验的下一部分中，我们将实现`increaseSessionsCompleted`。

仅当`sessionIsRunning`时，才应渲染Timer。为了有条件地渲染某些内容，您可以通过以下方式之一进行：

    { condition && <Component /> }

    / 上面的代码之所以有效，是因为在JavaScript中，true && 表达式
       总是对表达式求值，并且false &&表达式的计算结果始终为false（短路！）/

或使用内联If-Else（三元）运算符，例如：

    { condition ? (<Component />) : null }

- 快速检查：“条件condition”和“组件Component”应该是什么？

  - 头脑里有答案吗？你真的应该尝试回答它，如果不是的话

        由于我们希望我们的“计时器”仅在“ sessionIsRunning”为true时呈现：

        -`condition`将是`sessionIsRunning`（我们在`render`函数顶部的`this.state`中解构了`sessionIsRunning`）
        -`<Component />`将是我们已经为您创建的`<Timer />`。

        您可以使用上面介绍的“条件渲染”中的任何一种形式来完成此操作。

现在我们的计时器仅在当前会话正在运行时才显示，将一个key prop添加到“ Timer”，并将其设置为正在运行的项目ID，如下所示：

    <Timer
    	...
    	key={... the current running item ID ...}
    />

- 为什么要添加Key？我们甚至都没有在这里进行“map”！

    当一个键改变时，React将创建一个新的组件实例，而不是更新当前实例。

    键通常用于动态列表，但在这里也很有用。如果`itemIdRunning`发生变化，React将使用新的`onSessionComplete`函数渲染一个新的`Timer`组件，该函数将更新当前正在运行的项目的已完成会话数。

    这是一种有点高级的模式，如果您好奇，可以在[这里]（https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state .html）。

完成此部分后，单击项目的时钟按钮时，应该会看到来自上一个实验的计时器显示在顶部。

lab9-4.png

我们完成了！

完成计时器的会话后，它可能会出错，没关系。接下来，我们将实现它。

## 5. 实现creaseSessionsCompleted

此函数也在App.jsx中

“ increaseSessionsCompleted”是我们在完成会话后，更新每个项目的视觉指示器的函数（请记住，每个“ <TodoItem />”都带有一个“ sessionsCompleted” prop）。

该函数有一个参数：`itemId`，指定您要增加其完成的会话数的项目的ID。

您的目标是遍历项目列表，找到与`itemId`相匹配的项目，增加该项目对象的`sessionsCompleted`属性，并使用新的项目列表更新状态。

实现函数后，将`（）=> this.increaseSessionsCompleted（itemIdRunning）`传递给Timer组件。如果`itemIdRunning`得到更新，则将渲染一个新的`Timer`组件，并为`increaseSessionsCompleted`重新填充`itemIdRunning`值。

完成此部分后，当一个工作-休息会话完成后，应该会看到指示符出现在每个项目下方：

lab9-5.png

顶部任务已完成3个会话，底部任务已完成1个会话

## 6. 实现toggleItemIsCompleted

`toggleItemIsCompleted`与`increaseSessionsCompleted`非常相似：遍历项目列表，找到与`itemId`相匹配的项目，“ toggle”（设置为true或false）在item对象中的isCompleted值，并更新状态为新的项目列表。

与我们通过带有项目ID的this.startSession的方式类似，我们还需要将具有该项目ID的toggleItemIsCompleted传递给<TodoItem />的prop。

我们还将在render函数的顶部创建一个名为areItemsMarkedAsCompleted的变量，以便仅当某些项目标记为完成时才渲染我们的清除按钮（垃圾箱）。

换句话说，如果有完成的项目，则areItemsMarkedAsCompleted应该为true，否则为false。使用条件渲染来显示清除按钮，取决于“ areItemsMarkedAsCompleted”的值。

完成此部分后，您应该可以单击每个项目旁边的圆圈以“完成”它们。请注意，当所有项目均未完成时，“清除”按钮不会出现！

## 7. 实现clearCompletedItems

删除所有“ isCompleted”为true的项目。尝试使用JavaScript的filter方法以函数式编程编写它。

[Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)

这已经在`ClearButton`的`onClick` prop中传递了，所以您不必担心那部分！

## 8.添加一个空状态

至此一切都应该正常工作！让我们搞定一切。

如果我们的清单上没有任何项目，看起来有些空白。因此，我们将添加一个带有漂亮插图和消息的占位符。如果列表中没有任何项目，则重构代码以添加一个空状态（或占位符）。已经在文件顶部为您导入了“ EmptyState”组件。

您将为此使用三元运算符。这是关于如何使用三元运算符的另一个示例

    render() {
      const isLoggedIn = this.state.isLoggedIn;
      return (
        <div>
          {isLoggedIn ? (
            <LogoutButton onClick={this.handleLogoutClick} />
          ) : (
            <LoginButton onClick={this.handleLoginClick} />
          )}
        </div>
      );
    }

## 你做到了！

希望您在编写本实验的过程中有很多乐趣。这个由两部分组成的实验室应该为您提供最常用的React功能的好主意，并且是一个很好的示例，说明React在哪些方面发挥最大作用，构建具有大量状态和DOM管理的应用程序。

##除了本练习之外（可选）

您已经在此实验构建了我们认为非常酷的迷你应用程序。以下列出了一些我们认为很有趣的想法，您可以在空闲时间探索这些想法：

- 将此应用程序转换为Chrome扩展程序
- 使用[Electron]（https://electronjs.org/）将其变成跨平台桌面应用。 （这就是Slack，Atom和VSCode所使用的！）
- 使用[React Native]（https://facebook.github.io/react-native/）重写此应用，并将其制作为跨平台的iOS和Android应用。
- 添加现代Web API，例如[Notifications]（https://developer.mozilla.org/en-US/docs/Web/API/notification），[Audio]（https://developer.mozilla.org/en-US /docs /Web /API /Web_Audio_API）和[振动]（https://developer.mozilla.org/zh-CN/docs/Web/API/Vibration_API）。
- 使用[WebStorage API]（https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API）或任何其他形式的“数据库”，以便您的待办事项在会话中保持不变

