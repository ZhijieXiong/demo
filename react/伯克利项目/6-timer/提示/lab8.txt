## 介绍

欢迎！在今天的实验中，您将把所学到的有关组件生命周期的一些东西付诸实践，并且您将有更多的机会练习状态管理。

该实验室是一个由两部分组成的小型项目的一部分。在第一部分中，您将构建一个基本的番茄定时器。番茄时间技术是一种时间管理方法（alas！），它使用计时器将工作分解为多个间隔，通常为25分钟，中间间隔5分钟。

迷你项目的第一部分如下所示：

part1.gif

## 设定

您将在本地进行此实验，以便为您在自己的环境中进行开发提供更多实践。当您在最终项目中与其他人一起工作时，您将做同样的事情！

1. 下载 hwb9.zip，解压进入目录
2. 运行`npm install`以安装JavaScript依赖项。
3. 运行“ npm start”启动您的应用程序，该应用程序将在以下位置可用 `[localhost:3000](http://localhost:3000)`

## 文件

在本实验中，您将修改`Timer.jsx`和`App.js`。其他所有事情都已经完成了。如果您好奇的话可以随意浏览这些代码🙂

重要提示：我们强烈建议您与周围的人一起完成这个项目！因为共同努力将有助于确保您步入正轨！

## 1.初始化状态

请打开“ components /Timer.jsx”

我们将从初始化“ Timer”构造函数中的状态开始。我们已经绑定（bind）了将在本实验中实现的所有方法，因此您无需担心。

- 阅读：`.bind`有什么作用？

    在事件监听器中，我们使用过下面的创建新函数的模式，该函数从我们的类中调用一个函数：

        <button onClick={(event) => this.handleClick()}>
        	点击我
        </button>

    这样一来，在`handleClick`内部，我们可以使用诸如`this.setState`之类的函数，其中关键字“`this`”会引用我们的组件。

    获得和上面代码相同效果的另一种方法是，将函数的this关键字“绑定（bind）”到特定值。

    通过在构造函数中调用this.handleClick = this.handleClick.bind（this），我们现在可以将onClick写为：

        <button onClick={this.handleClick}>
        	Click me
        </button>

    现在，当调用`this.handleClick`时，`this`将始终引用定义它的组件。

    有关`this`的深入参考，请参见Mozilla的文档：

    [this](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this)

该状态具有3个键：“模式mode”，“时间time”和“正在播放isPlaying”。

- “mode”是一个字符串，表示我们是处于“WORK（工作）”模式（25分钟）还是处于“BREAK（休息）”模式（5分钟）。
- `time`是一个整数，以秒为单位，表示计数器的当前时间。
- `isPlaying`是一个布尔值，用于记录计时器是否在运转。

请初始化每个键。

-“mode”和“ isPlaying”的初始值来自prop“ mode”和“ autoPlays”。

    注意：这些prop允许我们创建一个React组件Timer，它以work模式开始，并在渲染时开始运行，如下所示：

        <Timer mode="WORK" autoPlays />

- `time`应该初始化为文件顶部`MODES_TIMES`变量中的值之一。模式由“mode”prop属性决定。

    注意：为了方便测试，`WORK_TIME`已初始化为2秒，`BREAK_TIME`已初始化为1秒，这样在测试时，我们就不必在本地运行太长时间。完成后，请随时进行更改以使其对您更有用！

-注意：布尔属性的JSX语法

    在React中，<Timer autoPlays />和<Timer autoPlays = {true} />是等效的。 `<Timer />``<Timer autoPlays = {false} />`也等效。

🏁在继续之前，使用React DevTools确认您的初始状态是您期望的状态。这是我们处于“计时器”状态的结果（来自React DevTools的屏幕截图，突出显示了<Timer>`：

lab8-1.png

## 2. 实现componentDidMount，SetTimer和tick

请打开“components /Timer.jsx”

组件安装（插入DOM树中）后，会立即调用componentDidMount（）。所以，这个函数很适合初始化组件的变量。我们将在setTimer内实现初始化逻辑，然后在componentDidMount函数中调用它。我们将在`setTimer`中实现这些逻辑，因为稍后可以重新使用这些逻辑。

### 2.1 实现componentDidMount和setTimer

首先，在componentDidMount中调用带有两个参数（setmode和time）的setTimer。这就是我们需要的所有功能！

接下来，我们将构建`setTimer`。您应该在setTimer中做两件事：

- 使用`mode`和`time`变量，更新状态
- 初始化周期调用`tick`函数的计时器/间隔（下面有如何执行此操作的更多信息）
    - 将计时器的“ intervalID”保存到名为“ this.timerID”的变量中，以便我们稍后可以停止该计时器。

为了重复调用一个函数，并初始化我们的计时器，我们需要使用`setInterval（）`方法（我们在之前的讲座中已经使用过！）

setInterval API的调用方法如下：

    // 例子：每`delay`毫秒调用一次`func`
    const intervalID = setInterval(func, delay)

- 第一个参数`func`是将重复执行的函数。
- 第二个参数`delay`以毫秒为单位，指定函数执行的频率。
- 返回值“ intervalID”是一个数字，用于标识创建的计时器。我们需要将此ID保存到变量中，以便在卸载组件时可以停止这个计时器（我们将在2.3节中进行此操作）。

注意：我们已经为您创建了一个名为“ TIME_STEP”的常量，该常量等于1000毫秒（即1秒）。

现在，组件的显示或状态将保持不变。如果一切工作不正常，您可能要在2.2（下一个）之后重新检查此部分。

---

### 2.2 实施tick

我们已经设置了每秒调用一次“ tick”函数，我们下面来确保它达到我们期望的效果。仅当“ isPlaying”设置为true，“ tick”方法才更新“ time”。请记住，这两个变量都是我们的状态！

要更新计时器，您需要时间的先前（previous）值。我们要从先前的值更新状态，您需要将一个函数传递给setState，而不是一个对象，就像这样：

    // ❌ 不要使用this.state.time，因为它可能不准确
    this.setState({
    	time: this.state.time - 1
    });

    // ✅ DO：传递一个函数以获​​取正确的“先前状态”：
    this.setState((prevState) => {
    	// 在此函数中返回您想要更新的状态对象。
    	return { /* 您的代码在这里 */ };
    });

确保修改现在的代码，包括上面的代码片段！

🏁 实施计时器更新后，您应该在页面中看到倒数计时。如果未看到，请检查您的逻辑。

您的倒计时将会一直下去，继续为负数。接下来，我们将解决这个问题！

setState还带有一个回调函数，作为它的第二个参数（可选的）。状态设置后，会立即执行此回调。

这是状态更新时我们想要做的：

- 当计时器完成时，执行下面的逻辑：

    - 调用我们的“stop（停止）”函数，为下一个模式设置计时器（从工作模式→休息模式，或休息模式→工作模式）。
    - 完成一个完整的会话（包括工作+休息）后，调用`completeSession`。
    - 注意：您将在后续部分实现`stop`和`completeSession`

🏁 实施完上述计时器完成逻辑后，由于我们尚未实现`stop`，您不会立即看到负数之后的倒计时停止！

- 提示

    重新使用setTimer函数设置下一个计时器。

## 3.实现componentWillUnmount和stop

每当卸载一个组件时（例如，如果父组件决定从屏幕上删除“ Timer”组件），我们都需要清除计时器，让“tick”函数停止执行。

因此，我们实现`stop`函数，并在`componentWillUnmount`函数中调用它。当“time（时间）”达到零时，我们将使用“tick”中的“stop”来停止计时器。我们要在`stop`中做两件事：

- 将“ isPlaying”状态设置为false
- 调用clearInterval（this.timerID）清除计时器。这将停止重复执行您在`setTimer`中设置的计时器。

进行此设置后，您的计时器应倒计时至零，然后被重置为1（或当前的Break（休息）模式时间）。 在用户单击播放之前，计时器不应从1开始继续执行！

## 4. 实现`reset`

用户界面上的X按钮，应将计时器重置为初始状态。要重置计时器，请重新使用您已经实现的函数。

我们可以调用stop和setTimer在工作模式下初始化一个新的计时器。

完成“重置”函数后，您的X重置按钮应表现出预期的效果。

## 5. 实现toggleIsPlaying

单击“ PausePlayButton”时，将调用“ toggleIsPlaying”。 `PausePlayButton`还会根据isPlaying的值显示不同的图标，如下所示：

    <PausePlayButton isPlaying={isPlaying} onClick={this.toggleIsPlaying} />

在实现toggleIsPlaying时，您可能会想这样做

    if (isPlaying) {
    	setState({isPlaying: false});
    } else {
    	setState({isPlaying: true});
    }

尽管上面的代码可行，但是请像我们在`tick`中所做的那样，使用先前的状态来更简洁地实现它。

在实现`toggleIsPlaying`之后，您应该能够完成一个完整的“会话”：完成一个工作模式，然后按play，进入休息模式，然后看到计时器重置，加入一个新的工作模式。

## 6.样式和UI更改

至此，计时器几乎已准备就绪，仅需进行一些UI调整

- `time`当前以秒为单位，请在`render`中调用`formatSecondsToMinutesAndSeconds`以便更好地格式化时间。 `formatSecondsToMinutesAndSecond`已经在文件顶部为您导入。
- 现在，计时器始终具有蓝色背景。我们希望背景在工作模式下为蓝色，在休息模式下为绿色。
    - 在工作模式下，“ timerClassName”应为“ timer-container timer-work”
    - 在中断模式下，“ timerClassName”应为“ timer-container timer-break”
- 注意：这些类的样式表已作为“ import'../styles /timer.css';`”在文件顶部导入

## 7. 增加会话完成计数器

### 7.1 onSessionComplete prop

我们可能希望记录到目前为止已完成的会话数，以便获得奖励。 “Timer（计时器）”组件带有一个“ onSessionComplete”的prop，一旦我们完成了一个完整的会话（工作+休息），就应执行此功能。例如：

    <Timer mode="WORK" onSessionComplete={()=>console.log('complete!')} />

完成会话后，显示“完成”。

请在completeSession（方法）内调用onSessionComplete（prop），完成计时器的调用。确保您在“ tick”内部调用“ completeSession”。

我们在completeSession中调用onComplete的原因是，将来可以轻松添加额外的功能。例如，如果要在会话完成后播放声音，则只需在“ completeSession”内部添加此逻辑，而无需进行任何其他更改。

### 7.2. 实施creaseSessionsCompleted

现在，完成了“计时器”组件，我们将要使用其所有功能。在App.jsx中，已经为您提供了一些用于会话计数器的代码。实现`increaseSessionsCompleted`并将其作为prop传递给`Timer`组件。

请注意，计时器对App.jsx中的`increaseSessionsCompleted`函数一无所知，它只知道一旦中断完成就应该执行`onSessionComplete`。如果我们想要一个可重用的计时器组件，这将很有用。

＃＃ 你做到了！

我们希望这是构建一些复杂的用户界面交互的有趣且实用的练习。现在，您可以在自己的学习课程中使用自己的番茄定时器！