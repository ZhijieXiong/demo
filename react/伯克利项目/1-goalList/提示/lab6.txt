# 介绍

今天，您将有机会了解上周我们在讲座中介绍的内容：状态！状态是大多数React应用程序的重要组成部分，而实践将是掌握状态的使用方法的最好方法。

起始代码

＃📚任务0：复习“状态”

参考 [React Docs]（https://reactjs.org/docs/state-and-lifecycle.html），复习一下什么是状态以及它如何工作。

阅读完以下内容后，请尝试与周围的人讨论这些问题。

## 状态如何工作

状态类似于props，但它是私有的，并由组件完全控制。

（https://reactjs.org/docs/components-and-props.html#functional-and-class-components）组件是有一些附加功能的类。本地状态是类私有的。

看下面的代码，Clock组件的状态是“当前时间“。

    class Clock extends React.Component {
      constructor(props) {
        super(props); // (1)
        this.state = { date: new Date() }; // (2)
      }

      render() {
        return (
          <div>
    				<h1>Hello, world!</h1>
    				<h2>It is {this.state.date.toLocaleTimeString()}.</h2> // (3)
    			</div>
    		);
      }
    }

以下是上面代码的说明：

1.因为我们会将props传递给组件的基本构造函数。所以组件的构造函数中，应始终调用super，调用其父类React.Component的构造函数。
2.通过直接将`this.state`设置为新对象，来在构造函数中设置state的初值。这是我们唯一一次使用`this.state =`来更新状态！在其它非构造函数里，不能这样设置，而要调用SetState函数
3.我们可以在`render`函数中通过this.state.date使用状态值，就像我们对`props'所做的一样。

## 更新状态

状态不只是用于存储要在`render`中使用的值。比如下面的代码，如果我们将它们添加到构造函数中，就会每秒更新一次状态：
    // (1)
    setInterval(() => {
    	// (2)
    	this.setState({
    		date: new Date() // (3)
    	});
    }, 1000);

这是对上面代码的说明：

1.使用`setInterval`（内置函数），每1秒钟重复一些JavaScript

    第一个参数是一个将定期运行的函数，第二个参数是一个数字（在本例中为“1000”），该数字告诉它运行该函数的周期（单位是毫秒）。

2.更新“this.state.date”值，我们使用“this.setState”函数，它有一个参数，是一个对象，该对象表示要放入状态或将状态中更新的新值。

    通过送入`{date：new Date（）}`，我们要求React将`this.state.date`更新为`new Date（）`。

3. “new Date（）”会创建一个新的Date对象，该对象代表当前时间。

最终，通过每秒调用`new Date（）`，我们可以将state设置为最新的日期和时间。

# 🙆‍♂️ 任务1：创建项目（Item）组件

第一步是创建“Item”组件，该组件将代表我们的目标。这些项目将包含目标文字，并跟踪目标是否已实现（这是状态发挥作用的地方！）

### 第1部分：阅读props

每个“Item”都需要显示其目标的文本。目标文本将从props送进来。探索`index.js`并编辑`Item.jsx`以正确渲染`Item`！

### 第2部分：添加状态

现在，让我们将`Item`组件设为“有状态”的！大多数Item组件都已经为您编写好了。您的工作是使用状态，记住这个目标是否已完成。如果已完成，则在用户单击文本时将其划掉。您可以随意在`state`对象中增加变量。

我们已经定义了一个CSS类，实现文本划掉（加横线）的效果。因此，如果一个目标已经完成（用户单击它时），将`className`变量设置为`“done”`即可。

最后，确保您的Item也可以被点击，取消选中！因为如果用户是意外点击的话，他还可以取消。

- 提示

        将状态加入此组件的过程分为三步：

        1）在构造函数中初始化状态

        2）当我们想更新状态时，调用`this.setState（）`。

        3）从我们的`render（）`函数中读取状态，以设置`className`变量。

        查看代码中的注释，以了解如何完成所有这些事情！我们建议在状态“done”中添加一个布尔值，每次用户单击时在“true”和“false”之间切换。

哇，任务1完成了！我们尚无法添加项目，但是现在我们可以将其选中！

# 💪 Task 2: 新增项目（Item）

现在，我们的“Item”组件已经创建，我们需要使用户能够将这些项目添加到他们的项目列表中！我们将在位于index.js的App组件中，跟踪这个项目列表。

我们的主页包含一些关键元素：

1.一个输入框，用于在项目列表中加入新项目
2.添加项目的提交按钮
3.显示到目前为止添加的所有项目的列表

首先，我们需要找出组件需要跟踪哪些信息。然后，根据用户的操作，我们要更新这些信息，并将它们的更改反映到应用程序中。

1.打开index.js，在里面初始化状态。

考虑一下您想在状态中包含哪些值？

    - 答：应该记录什么状态？

        - 一个字符串值，代表用户当前在输入框中输入的目标（您可以将其称为“ currentGoal”）
        - 包括用户所有当前目标的字符串数组（您可以将其称为“goals”或“items”）

2.在已有的代码中，输入值被设置为“CHANGE ME！”`。请更新此值，使其基于我们在状态中存储的内容（如果使用了我们的名字，则为currentGoal）。

3.当输入框中的值发生更改时，我们将调用已定义的函数“ handleInputChange”。填写此函数的主体，以使用输入框中的当前值更新状态。

4.单击提交按钮后，我们将调用已定义的函数addItem。请修改此函数，使用输入框中的值更新状态。

    - 提示

    请使用this.setState函数更新状态，并且使用handleInputChange函数存储“输入框中的值”。

    请将用户新输入的项目，“append（附加）”到当前目标/项目列表。由于我们无法直接修改状态（“this.state.goals = ...”），因此我们也无法直接“push”它进入目标数组（“this.state.goals.push（“新目标”））），因此，您将要创建一个新的数组，在该数组的末尾加上新值。然后把它设置进状态中。

    实现这种效果的一种方法是使用spread运算符（`...`），请尝试下面的代码，理解它的作用：

        let oldArray = [1, 2, 3];
        console.log([...oldArray, 4]); // Prints the value [1, 2, 3, 4]

5. 在当前的代码中，我们使用`this.placeholderList`的局部变量表示目标列表。然后，在`render`函数底部附近，我们使用`map`函数将列表中的每个项目转换为`Item`组件。请更改此代码，换为我们存储在状态中的目标列表！

太棒了！如果您正确地完成了所有这些操作，你现在的程序就可以将新目标添加到目标列表中，并看到它们出现在文本输入下方了。

注意，当我们用新的目标更新状态时，我们的组件会自动再次调用`render`函数以显示最新项，这就是React的自动更新！这是在我们的组件中使用状态管理信息的好处之一。

# 🏁 奖励任务：跟踪完成的项目

虽然我们有一个目标清单，但是React中还有一个更常见的模式值得实践。我们希望我们的“ App”组件显示要完成的剩余物品数量！换句话说，我们希望我们的`Item`组件的状态，被其父组件（`App`）知道。

将props传递给子组件是“父对子”通信的一个示例。在此任务中，我们将通过回调设置“子对父”的通信。这是非常重要的。

### 第1部分：发送回调

1.在`index.js`中，添加一个变量，记录还未完成的项目数。
2.在Render渲染函数中添加一行以显示此数字。
3.更改现有代码，在用户添加新的项目时，更新此数字。
4.最后，编写一个函数，将其传递给每个`Item`组件，这些函数描述：单击某项时应发生的情况。考虑一下您的状态应该如何改变！

### 第2部分：更新Item组件

在“ Item.jsx”内部，编辑现有的“ toggleDone”函数以调用父组件传递进来的回调函数。

注意：这实际上并不是跟踪已完成项目的最好方法。如果我们可以花更多时间在此应用程序上，建议将每个Todo Item表示为一个具有两个值的对象：文本以及是否已完成。考虑一下它提供的好处！

熟悉React中的状态非常重要，因此我们强烈建议您花些时间来理解和总结本项目中你学到的。

请提交你的代码的Github仓库URL